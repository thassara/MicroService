{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8081';\nexport const getAllRestaurants = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/public/restaurants`);\n  if (!response.ok) throw new Error('Failed to fetch restaurants');\n  return await response.json();\n};\nexport const getRestaurantById = async id => {\n  const response = await fetch(`${API_BASE_URL}/api/public/restaurants/${id}`);\n  if (!response.ok) throw new Error('Failed to fetch restaurant');\n  return await response.json();\n};\nexport const createRestaurant = async restaurantData => {\n  const response = await fetch(`${API_BASE_URL}/restaurants/create`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${localStorage.getItem('token')}`\n    },\n    body: JSON.stringify(restaurantData)\n  });\n  if (!response.ok) throw new Error('Failed to create restaurant');\n  return await response.json();\n};\nexport const updateRestaurant = async (id, restaurantData) => {\n  const response = await fetch(`${API_BASE_URL}/api/owner/restaurants/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${localStorage.getItem('token')}`\n    },\n    body: JSON.stringify(restaurantData)\n  });\n  if (!response.ok) throw new Error('Failed to update restaurant');\n  return await response.json();\n};\nexport const toggleAvailability = async id => {\n  const response = await fetch(`${API_BASE_URL}/api/owner/restaurants/${id}/availability`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to toggle availability');\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_BASE_URL","getAllRestaurants","response","fetch","ok","Error","json","getRestaurantById","id","createRestaurant","restaurantData","method","headers","localStorage","getItem","body","JSON","stringify","updateRestaurant","toggleAvailability"],"sources":["D:/3year/microservice_frontend/src/apiRestaurant/restaurantApi.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8081';\r\n\r\nexport const getAllRestaurants = async () => {\r\n    const response = await fetch(`${API_BASE_URL}/api/public/restaurants`);\r\n    if (!response.ok) throw new Error('Failed to fetch restaurants');\r\n    return await response.json();\r\n};\r\n\r\nexport const getRestaurantById = async (id) => {\r\n    const response = await fetch(`${API_BASE_URL}/api/public/restaurants/${id}`);\r\n    if (!response.ok) throw new Error('Failed to fetch restaurant');\r\n    return await response.json();\r\n};\r\n\r\nexport const createRestaurant = async (restaurantData) => {\r\n    const response = await fetch(`${API_BASE_URL}/restaurants/create`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify(restaurantData),\r\n    });\r\n    if (!response.ok) throw new Error('Failed to create restaurant');\r\n    return await response.json();\r\n};\r\n\r\nexport const updateRestaurant = async (id, restaurantData) => {\r\n    const response = await fetch(`${API_BASE_URL}/api/owner/restaurants/${id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify(restaurantData),\r\n    });\r\n    if (!response.ok) throw new Error('Failed to update restaurant');\r\n    return await response.json();\r\n};\r\n\r\nexport const toggleAvailability = async (id) => {\r\n    const response = await fetch(`${API_BASE_URL}/api/owner/restaurants/${id}/availability`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        }\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error('Failed to toggle availability');\r\n    }\r\n\r\n    return response.json();\r\n};"],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAAuB;AAE5C,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACzC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,yBAAyB,CAAC;EACtE,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAChE,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAChC,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,EAAE,IAAK;EAC3C,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,2BAA2BQ,EAAE,EAAE,CAAC;EAC5E,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EAC/D,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAChC,CAAC;AAED,OAAO,MAAMG,gBAAgB,GAAG,MAAOC,cAAc,IAAK;EACtD,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,qBAAqB,EAAE;IAC/DW,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC5D,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,cAAc;EACvC,CAAC,CAAC;EACF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAChE,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAChC,CAAC;AAED,OAAO,MAAMY,gBAAgB,GAAG,MAAAA,CAAOV,EAAE,EAAEE,cAAc,KAAK;EAC1D,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,0BAA0BQ,EAAE,EAAE,EAAE;IACxEG,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC5D,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,cAAc;EACvC,CAAC,CAAC;EACF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAChE,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAChC,CAAC;AAED,OAAO,MAAMa,kBAAkB,GAAG,MAAOX,EAAE,IAAK;EAC5C,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,0BAA0BQ,EAAE,eAAe,EAAE;IACrFG,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB;EACJ,CAAC,CAAC;EAEF,IAAI,CAACV,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;EACpD;EAEA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}