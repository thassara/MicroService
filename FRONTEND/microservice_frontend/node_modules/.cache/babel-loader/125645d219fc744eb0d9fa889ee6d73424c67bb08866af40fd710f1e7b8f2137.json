{"ast":null,"code":"const API_BASE_URL = \"http://localhost:8080\"; // Replace with your actual API endpoint\n\n// Login User\nexport const loginUser = async credentials => {\n  console.log(\"API_BASE_URL\", API_BASE_URL);\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(credentials)\n    });\n\n    // Directly get the token as a string\n    const token = await response.text(); // Use .text() instead of .json()\n\n    console.log(\"Received token:\", token);\n    if (!response.ok) {\n      throw new Error(\"Login failed\");\n    }\n\n    // Save token to localStorage\n    if (token) {\n      localStorage.setItem(\"token\", token);\n    }\n    return {\n      success: true,\n      token\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An unexpected error occurred\"\n    };\n  }\n};\n\n// Register User (unchanged)\nexport const registerUser = async userData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/auth/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userData)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || \"Registration failed\");\n    }\n    return {\n      success: true,\n      data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An unexpected error occurred\"\n    };\n  }\n};\n\n// Example of a request with token from localStorage\nexport const fetchProtectedData = async () => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    return {\n      success: false,\n      error: \"No token found, please login.\"\n    };\n  }\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/protected-endpoint`, {\n      method: \"GET\",\n      headers: {\n        \"Authorization\": `Bearer ${token}`,\n        // Add token to Authorization header\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || \"Failed to fetch protected data\");\n    }\n    return {\n      success: true,\n      data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An unexpected error occurred\"\n    };\n  }\n};","map":{"version":3,"names":["API_BASE_URL","loginUser","credentials","console","log","response","fetch","method","headers","body","JSON","stringify","token","text","ok","Error","localStorage","setItem","success","error","message","registerUser","userData","data","json","fetchProtectedData","getItem"],"sources":["D:/3year/microservice_frontend/src/service/api.js"],"sourcesContent":["const API_BASE_URL = \"http://localhost:8080\"; // Replace with your actual API endpoint\r\n\r\n// Login User\r\nexport const loginUser = async (credentials) => {\r\n  console.log(\"API_BASE_URL\", API_BASE_URL);\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n\r\n    // Directly get the token as a string\r\n    const token = await response.text(); // Use .text() instead of .json()\r\n\r\n    console.log(\"Received token:\", token);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Login failed\");\r\n    }\r\n\r\n    // Save token to localStorage\r\n    if (token) {\r\n      localStorage.setItem(\"token\", token);\r\n    }\r\n\r\n    return { success: true, token };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      error: error instanceof Error ? error.message : \"An unexpected error occurred\",\r\n    };\r\n  }\r\n};\r\n\r\n// Register User (unchanged)\r\nexport const registerUser = async (userData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/api/auth/register`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(userData),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.error || \"Registration failed\");\r\n    }\r\n\r\n    return { success: true, data };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      error: error instanceof Error ? error.message : \"An unexpected error occurred\",\r\n    };\r\n  }\r\n};\r\n\r\n// Example of a request with token from localStorage\r\nexport const fetchProtectedData = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  if (!token) {\r\n    return { success: false, error: \"No token found, please login.\" };\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/api/protected-endpoint`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Authorization\": `Bearer ${token}`, // Add token to Authorization header\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.error || \"Failed to fetch protected data\");\r\n    }\r\n\r\n    return { success: true, data };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      error: error instanceof Error ? error.message : \"An unexpected error occurred\",\r\n    };\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}